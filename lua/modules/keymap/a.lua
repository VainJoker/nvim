---- Lua
--vim.keymap.set('n', '<leader>xx', function()
--  require('trouble').open()
--end)
--vim.keymap.set('n', '<leader>xw', function()
--  require('trouble').open('workspace_diagnostics')
--end)
--vim.keymap.set('n', '<leader>xd', function()
--  require('trouble').open('document_diagnostics')
--end)
--vim.keymap.set('n', '<leader>xq', function()
--  require('trouble').open('quickfix')
--end)
--vim.keymap.set('n', '<leader>xl', function()
--  require('trouble').open('loclist')
--end)
--vim.keymap.set('n', 'gR', function()
--  require('trouble').open('lsp_references')
--end)
---- restore the session for the current directory
--vim.api.nvim_set_keymap("n", "<leader>qs", [[<cmd>lua require("persistence").load()<cr>]], {})
--
---- restore the last session
--vim.api.nvim_set_keymap("n", "<leader>ql", [[<cmd>lua require("persistence").load({ last = true })<cr>]], {})
--
---- stop Persistence => session won't be saved on exit
--vim.api.nvim_set_keymap("n", "<leader>qd", [[<cmd>lua require("persistence").stop()<cr>]], {})
--
--  keys = {
--    { "s", mode = { "n", "x", "o" }, function() require("flash").jump() end, desc = "Flash" },
--    { "S", mode = { "n", "o", "x" }, function() require("flash").treesitter() end, desc = "Flash Treesitter" },
--    { "r", mode = "o", function() require("flash").remote() end, desc = "Remote Flash" },
--    { "R", mode = { "o", "x" }, function() require("flash").treesitter_search() end, desc = "Treesitter Search" },
--    { "<c-s>", mode = { "c" }, function() require("flash").toggle() end, desc = "Toggle Flash Search" },
--  },
-- keys = {
--     { "]t", function() require("todo-comments").jump_next() end, desc = "Next todo comment" },
--     { "[t", function() require("todo-comments").jump_prev() end, desc = "Previous todo comment" },
--     { "<leader>xt", "<cmd>TodoTrouble<cr>", desc = "Todo (Trouble)" },
--     { "<leader>xT", "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme (Trouble)" },
--     { "<leader>st", "<cmd>TodoTelescope<cr>", desc = "Todo" },
--     { "<leader>sT", "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme" },
--   },
--
--{ "<leader>xx", "<cmd>TroubleToggle document_diagnostics<cr>", desc = "Document Diagnostics (Trouble)" },
--   { "<leader>xX", "<cmd>TroubleToggle workspace_diagnostics<cr>", desc = "Workspace Diagnostics (Trouble)" },
--   { "<leader>xL", "<cmd>TroubleToggle loclist<cr>", desc = "Location List (Trouble)" },
--   { "<leader>xQ", "<cmd>TroubleToggle quickfix<cr>", desc = "Quickfix List (Trouble)" },
--   {
--     "[q",
--     function()
--       if require("trouble").is_open() then
--         require("trouble").previous({ skip_groups = true, jump = true })
--       else
--         local ok, err = pcall(vim.cmd.cprev)
--         if not ok then
--           vim.notify(err, vim.log.levels.ERROR)
--         end
--       end
--     end,
--     desc = "Previous trouble/quickfix item",
--   },
--   {
--     "]q",
--     function()
--       if require("trouble").is_open() then
--         require("trouble").next({ skip_groups = true, jump = true })
--       else
--         local ok, err = pcall(vim.cmd.cnext)
--         if not ok then
--           vim.notify(err, vim.log.levels.ERROR)
--         end
--       end
--     end,
--     desc = "Next trouble/quickfix item",
--   },
-- },
-- keys = {
--   { "<S-Enter>", function() require("noice").redirect(vim.fn.getcmdline()) end, mode = "c", desc = "Redirect Cmdline" },
--   { "<leader>snl", function() require("noice").cmd("last") end, desc = "Noice Last Message" },
--   { "<leader>snh", function() require("noice").cmd("history") end, desc = "Noice History" },
--   { "<leader>sna", function() require("noice").cmd("all") end, desc = "Noice All" },
--   { "<leader>snd", function() require("noice").cmd("dismiss") end, desc = "Dismiss All" },
--   { "<c-f>", function() if not require("noice.lsp").scroll(4) then return "<c-f>" end end, silent = true, expr = true, desc = "Scroll forward", mode = {"i", "n", "s"} },
--   { "<c-b>", function() if not require("noice.lsp").scroll(-4) then return "<c-b>" end end, silent = true, expr = true, desc = "Scroll backward", mode = {"i", "n", "s"}},
-- },
-- keys = {
--   { "<leader>,", "<cmd>Telescope buffers show_all_buffers=true<cr>", desc = "Switch Buffer" },
--   { "<leader>/", Util.telescope("live_grep"), desc = "Grep (root dir)" },
--   { "<leader>:", "<cmd>Telescope command_history<cr>", desc = "Command History" },
--   { "<leader><space>", Util.telescope("files"), desc = "Find Files (root dir)" },
--   -- find
--   { "<leader>fb", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
--   { "<leader>ff", Util.telescope("files"), desc = "Find Files (root dir)" },
--   { "<leader>fF", Util.telescope("files", { cwd = false }), desc = "Find Files (cwd)" },
--   { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent" },
--   { "<leader>fR", Util.telescope("oldfiles", { cwd = vim.loop.cwd() }), desc = "Recent (cwd)" },
--   -- git
--   { "<leader>gc", "<cmd>Telescope git_commits<CR>", desc = "commits" },
--   { "<leader>gs", "<cmd>Telescope git_status<CR>", desc = "status" },
--   -- search
--   { '<leader>s"', "<cmd>Telescope registers<cr>", desc = "Registers" },
--   { "<leader>sa", "<cmd>Telescope autocommands<cr>", desc = "Auto Commands" },
--   { "<leader>sb", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "Buffer" },
--   { "<leader>sc", "<cmd>Telescope command_history<cr>", desc = "Command History" },
--   { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },
--   { "<leader>sd", "<cmd>Telescope diagnostics bufnr=0<cr>", desc = "Document diagnostics" },
--   { "<leader>sD", "<cmd>Telescope diagnostics<cr>", desc = "Workspace diagnostics" },
--   { "<leader>sg", Util.telescope("live_grep"), desc = "Grep (root dir)" },
--   { "<leader>sG", Util.telescope("live_grep", { cwd = false }), desc = "Grep (cwd)" },
--   { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Help Pages" },
--   { "<leader>sH", "<cmd>Telescope highlights<cr>", desc = "Search Highlight Groups" },
--   { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Key Maps" },
--   { "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
--   { "<leader>sm", "<cmd>Telescope marks<cr>", desc = "Jump to Mark" },
--   { "<leader>so", "<cmd>Telescope vim_options<cr>", desc = "Options" },
--   { "<leader>sR", "<cmd>Telescope resume<cr>", desc = "Resume" },
--   { "<leader>sw", Util.telescope("grep_string", { word_match = "-w" }), desc = "Word (root dir)" },
--   { "<leader>sW", Util.telescope("grep_string", { cwd = false, word_match = "-w" }), desc = "Word (cwd)" },
--   { "<leader>sw", Util.telescope("grep_string"), mode = "v", desc = "Selection (root dir)" },
--   { "<leader>sW", Util.telescope("grep_string", { cwd = false }), mode = "v", desc = "Selection (cwd)" },
--   { "<leader>uC", Util.telescope("colorscheme", { enable_preview = true }), desc = "Colorscheme with preview" },
--   {
--     "<leader>ss",
--     Util.telescope("lsp_document_symbols", {
--       symbols = {
--         "Class",
--         "Function",
--         "Method",
--         "Constructor",
--         "Interface",
--         "Module",
--         "Struct",
--         "Trait",
--         "Field",
--         "Property",
--       },
--     }),
--     desc = "Goto Symbol",
--   },
--   {
--     "<leader>sS",
--     Util.telescope("lsp_dynamic_workspace_symbols", {
--       symbols = {
--         "Class",
--         "Function",
--         "Method",
--         "Constructor",
--         "Interface",
--         "Module",
--         "Struct",
--         "Trait",
--         "Field",
--         "Property",
--       },
--     }),
--     desc = "Goto Symbol (Workspace)",
--   },
-- },
-- vim.api.nvim_set_keymap("n", "<leader>ta", ":$tabnew<CR>", { noremap = true })
-- vim.api.nvim_set_keymap("n", "<leader>tc", ":tabclose<CR>", { noremap = true })
-- vim.api.nvim_set_keymap("n", "<leader>to", ":tabonly<CR>", { noremap = true })
-- vim.api.nvim_set_keymap("n", "<leader>tn", ":tabn<CR>", { noremap = true })
-- vim.api.nvim_set_keymap("n", "<leader>tp", ":tabp<CR>", { noremap = true })
-- -- move current tab to previous position
-- vim.api.nvim_set_keymap("n", "<leader>tmp", ":-tabmove<CR>", { noremap = true })
-- -- move current tab to next position
-- vim.api.nvim_set_keymap("n", "<leader>tmn", ":+tabmove<CR>", { noremap = true })
-- " set
-- autocmd TermEnter term://*toggleterm#*
--       \ tnoremap <silent><c-t> <Cmd>exe v:count1 . "ToggleTerm"<CR>
--
-- " By applying the mappings this way you can pass a count to your
-- " mapping to open a specific window.
-- " For example: 2<C-t> will open terminal 2
-- nnoremap <silent><c-t> <Cmd>exe v:count1 . "ToggleTerm"<CR>
-- inoremap <silent><c-t> <Esc><Cmd>exe v:count1 . "ToggleTerm"<CR>
